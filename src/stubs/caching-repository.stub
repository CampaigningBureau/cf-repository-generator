<?php

namespace %namespaces.caching-repositories%;

use Illuminate\Contracts\Cache\Repository as Cache;
use Illuminate\Support\Collection;
use %namespaces.contracts%\%modelName%Repository;
use %namespaces.models%\%modelName%;

class Caching%modelName%Repository implements %modelName%Repository
{
    /**
     * @var %modelName%Repository
     */
    private $repository;
    /**
     * @var Cache
     */
    private $cache;

    /**
     * Caching%modelName%Repository constructor.
     *
     * @param %modelName%Repository $repository
     * @param Cache             $cache
     */
    public function __construct(%modelName%Repository $repository, Cache $cache)
    {
        $this->repository = $repository;
        $this->cache = $cache;
    }


    /**
     * @return Collection
     */
    public function all()
    {
        return $this->cache->remember('%cacheKey%.all', 1440, function ()
        {
            return $this->repository->all();
        });
    }

    /**
     * @return %modelName%
     */
    public function latest()
    {
        return $this->cache->remember('%cacheKey%.latest', 1440, function ()
        {
            return $this->repository->latest();
        });
    }

    /**
     * load an item by id
     *
     * @param Collection $allEntries
     * @param string     $id
     *
     * @return %modelName% |null
     */
    public function byId(Collection $allEntries, $id): ?%modelName%
    {
        return $this->cache->remember('%cacheKey%.id.' . $id, 1440, function () use ($allEntries, $id)
        {
            return $this->repository->byId($allEntries, $id);
        });
    }

    /**
     * load an item by slug
     *
     * @param Collection $allEntries
     * @param string     $slug
     *
     * @return %modelName%|null
     */
    public function bySlug(Collection $allEntries, $slug): ?%modelName%
    {
        return $this->cache->remember('%cacheKey%.slug.' . $slug, 1440, function () use ($allEntries, $slug)
        {
            return $this->repository->bySlug($allEntries, $slug);
        });
    }

    /**
     * @param Collection $allEntries
     * @param null       $q
     *
     * @return Collection
     */
    public function filtered(Collection $allEntries, $q = null): Collection
    {
        return $this->cache->remember('%cacheKey%.filtered.' . strtolower($q), 1440, function () use ($allEntries, $q)
        {
            return $this->repository->filtered($allEntries, $q);
        });
    }
}